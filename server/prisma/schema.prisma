generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model User {
   id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   username           String   @db.VarChar(255)
   password           String   @db.VarChar(1000)
   email              String   @unique @db.VarChar(255)
   picture            String?  @db.VarChar(255) @default("https://firebasestorage.googleapis.com/v0/b/formulafan-38467.appspot.com/o/helmet.png?alt=media&token=67b3e8bc-66a5-4161-a89d-f1e5e2a14535")
   hashedRefreshToken String?
   createdAt          DateTime @default(now())
   updatedAt          DateTime @updatedAt
   posts    Post[]
   likedPosts Post[] @relation("UserLikedPosts")
   comments Comment[]
   sharedPosts Post[] @relation("UserSharedPosts")
   savedPosts Post[] @relation("UserSavedPosts")
  

   conversationsInitiated Conversation[] @relation("UserOne")
   conversationsReceived  Conversation[] @relation("UserTwo")

   direcetMessages DirectMessage[]

   settings UserSettings?

   createdGroups Group[]
   members       Member[]
}

model UserSettings {
   id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   theme         String  @default("NORMAL") @db.VarChar(50)
   notifications Boolean @default(false)

   userId String @unique @db.Uuid
   user   User   @relation(fields: [userId], references: [id])
}

model Post {
   id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   textContent  String   @db.VarChar(1000)
   imageContentUrl String?  @db.VarChar(1000)
   videoContent String?  @db.VarChar(1000)
   createdAt    DateTime @default(now())
   updatedAt    DateTime @updatedAt

   authorId String @db.Uuid
   author   User   @relation(fields: [authorId], references: [id])

   likedBy   User[] @relation("UserLikedPosts") 
   comments Comment[] @relation("PostComments")
   sharedBy    User[]        @relation("UserSharedPosts")
   savedBy   User[]      @relation("UserSavedPosts")
}

model Comment {
   id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   textContent  String?  @db.VarChar(1000)
   imageContentUrl String?  @db.VarChar(1000)
   videoContent String?  @db.VarChar(1000)
   createdAt    DateTime @default(now())
   updatedAt    DateTime @updatedAt

   authorId String @db.Uuid
   author   User   @relation(fields: [authorId], references: [id])

   postId String @db.Uuid
   post   Post   @relation(fields: [postId], references: [id], name: "PostComments")

   likes    Int       @default(0)
   shares   Int       @default(0)
   views    Int       @default(0)
   saves    Int       @default(0)
}

model Group {
   id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   name       String @db.VarChar(100)
   imageUrl   String? @db.VarChar(1000) @default("https://firebasestorage.googleapis.com/v0/b/formulafan-38467.appspot.com/o/racing-car.png?alt=media&token=ed7bb8b3-370f-4521-9ccb-b8cf42955271")
   inviteCode String

   creatorId String @db.Uuid
   creator   User   @relation(fields: [creatorId], references: [id])

   settings GroupSettings?

   members  Member[]
   channels Channel[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model GroupSettings {
   id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   allowComments Boolean @default(true)
   isPrivate     Boolean @default(false)

   groupId String @unique @db.Uuid
   group   Group  @relation(fields: [groupId], references: [id])
}

enum MemberRole {
   ADMIN
   MODERATOR
   MEMBER
}

model Member {
   id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   userId String @db.Uuid
   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

   groupId String @db.Uuid
   group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

   messages Message[]

   role MemberRole @default(MEMBER)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([userId], name: "userId")
   @@index([groupId], name: "groupId")
}

enum ChannelType {
   TEXT
   VOICE
}

model Channel {
   id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   name      String
   type      ChannelType @default(TEXT)
   isPrivate Boolean     @default(false)

   groupId String @db.Uuid
   group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

   messages Message[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Message {
   id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   content String @db.Text

   fileUrl String? @db.Text

   memberId String @db.Uuid
   member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

   channelId String  @db.Uuid
   channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

   deleted Boolean @default(false)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([channelId])
   @@index([memberId])
}

model Conversation {
   id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   userOneId String @db.Uuid
   userOne   User   @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)

   userTwoId String @db.Uuid
   userTwo   User   @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

   directMessages DirectMessage[]

   @@unique([userOneId, userTwoId])
   @@index([userOneId])
   @@index([userTwoId])
}

model DirectMessage {
   id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   content String @db.Text

   fileUrl String? @db.Text

   userId String @db.Uuid
   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

   conversationId String       @db.Uuid
   conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   deleted Boolean @default(false)

   @@index([userId])
   @@index([conversationId])
}
