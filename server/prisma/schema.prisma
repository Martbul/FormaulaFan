generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model User {
   id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   username           String   @db.VarChar(255)
   password           String   @db.VarChar(1000)
   email              String   @unique @db.VarChar(255)
   picture            String?  @db.VarChar(255)
   hashedRefreshToken String?
   createdAt          DateTime @default(now())
   updatedAt          DateTime @updatedAt

   posts    Post[]
   comments Comment[]

   settings UserSettings?

   // followers User[] @relation("Followers", references: [id])
   // following User[]
   // friends User[]
   // settings Settings
   // bookmarks Post[]

   createdGroups  Group[]
   members        Member[]
   channels       Channel[]
}

model UserSettings {
   id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   theme         String  @db.VarChar(50) @default("NORMAL")
   notifications Boolean @default(false)

   userId        String    @unique @db.Uuid
   user          User      @relation(fields: [userId], references: [id])
}

model Post {
   id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   title        String   @db.VarChar(200)
   textContent  String?  @db.VarChar(1000)
   imageContent String?  @db.VarChar(1000)
   videoContent String?  @db.VarChar(1000)
   createdAt    DateTime @default(now())
   updatedAt    DateTime @updatedAt

   authorId String @db.Uuid
   author   User   @relation(fields: [authorId], references: [id])

   likes    Int       @default(0)
   comments Comment[] @relation("PostComments")
   shares   Int       @default(0)
   views    Int       @default(0)
   saves    Int       @default(0)
}

model Comment {
   id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   textContent  String?  @db.VarChar(1000)
   imageContent String?  @db.VarChar(1000)
   videoContent String?  @db.VarChar(1000)
   createdAt    DateTime @default(now())
   updatedAt    DateTime @updatedAt

   authorId String @db.Uuid
   author   User   @relation(fields: [authorId], references: [id])

   postId String @db.Uuid
   post   Post   @relation(fields: [postId], references: [id], name: "PostComments")
}

model Group {
   id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   name       String @db.VarChar(100)
   imageUrl   String
   inviteCode String

   creatorId String @db.Uuid
   creator   User   @relation(fields: [creatorId], references: [id])

   settings       GroupSettings?
  

   members  Member[]
   channels Channel[]

   createdAt       DateTime @default(now())
   updatedAt       DateTime @updatedAt
 
}

model GroupSettings {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  allowComments  Boolean        @default(true)
  isPrivate      Boolean        @default(false)

  group          Group          @relation(fields: [groupId], references: [id])
  groupId        String         @unique @db.Uuid
}

enum MemberRole {
   ADMIN
   MODERATOR
   MEMBER
}

model Member {
   id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

   userId String @db.Uuid
   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

   groupId String @db.Uuid
   group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

   role MemberRole @default(MEMBER)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([userId], name: "userId")
   @@index([groupId], name: "groupId")
}

enum ChannelType {
   TEXT
   AUDIO
   VIDEO
}

model Channel {
   id   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   name String
   type ChannelType @default(TEXT)

   userId String @db.Uuid
   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

   groupId String @db.Uuid
   group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}
